<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on OCGI</title><link>https://ocgi.github.io/en/docs/guides/</link><description>Recent content in Guides on OCGI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2021 The OCGI Authors</copyright><atom:link href="https://ocgi.github.io/en/docs/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Squad Introduction</title><link>https://ocgi.github.io/en/docs/guides/squad_details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/guides/squad_details/</guid><description>Squad A Squad controller provides declarative update management capabilities for GameServers and GameServerSets. The user can describe the target state in Squad (such as the number of replicas), and the Squad controller will change the actual state according to certain rules, and finally make it reach the desired state.
main feature Manage a group of GameServer Support rolling update Support batch (gray) update Support in-place update Support GameServer auto-scaling Squad update strategy Squad specifies the strategy for updating GameServer through .</description></item><item><title>GeneralPodAutoscaler Introduction</title><link>https://ocgi.github.io/en/docs/guides/gpa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/guides/gpa/</guid><description>We can use GeneralPodAutoscaler(GPA) to scale the Pod horizontally. GPA is a component developed based on K8s HPA (v2beta2 api).
GPA feature It does not depend on the K8s version, it can run on K8s 1.8, 1.9, 1.19 and other versions, only the cluster supports CRD; Through GPA&amp;rsquo;s Provider, more external data sources can be supported, including kafka, redis, etc.; Support more scaling modes, with greater flexibility and scalability; GPA upgrades are flexible, and there is no need to restart K8s core components during upgrade.</description></item><item><title>GameServer autoscaling workflow</title><link>https://ocgi.github.io/en/docs/guides/autoscaling_flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/guides/autoscaling_flow/</guid><description>The main flow of GameServer autoscaling is as follows:
The Autoscaler controller calculates a reasonable number of copies of Squad according to the metric information of GameServer;
Carrier selects GameServer according to certain rules, and then sets Constraint to notify the application to offline the copy;
For the GameServer corresponding to RoomAssign offline, set condition offline=true, which means that no new players will be assigned to the GameServer;</description></item><item><title>GamerServer scaling down priority</title><link>https://ocgi.github.io/en/docs/guides/squad-scaledown-priority/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/guides/squad-scaledown-priority/</guid><description>Background Generally speaking, the number of players on each game server will be different. When we scaling down, we can select a replica with fewer users and delete it. In this way, the scaling-down overhead on the application side can be smaller, and at the same time, the utilization efficiency of the underlying resources can be improved.
We can set a certain priority for each game server based on some application metrics.</description></item></channel></rss>