<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on OCGI</title><link>https://ocgi.github.io/en/docs/getting-started/</link><description>Recent content in Getting Started on OCGI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2021 The OCGI Authors</copyright><atom:link href="https://ocgi.github.io/en/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a GameServer</title><link>https://ocgi.github.io/en/docs/getting-started/gameserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/getting-started/gameserver/</guid><description>GameServer represents a single game server. It is based on K8s Pod implementation and is a further abstraction of K8s Pod.
Create a GameServer cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: &amp;#34;carrier.ocgi.dev/v1alpha1&amp;#34; kind: GameServer metadata: name: &amp;#34;simple-tcp-example&amp;#34; spec: ports: - name: default containerPort: 7654 protocol: TCP health: disabled: true template: spec: containers: - name: server image: ocgi/simple-tcp:0.1 resources: requests: memory: &amp;#34;32Mi&amp;#34; cpu: &amp;#34;20m&amp;#34; limits: memory: &amp;#34;32Mi&amp;#34; cpu: &amp;#34;20m&amp;#34; serviceAccount: carrier-sdk serviceAccountName: carrier-sdk EOF Fetch the GameServer Status # kubectl get gs NAME STATE ADDRESS PORT EXTERNALIP PORTRANGE NODE AGE simple-tcp-example Running 172.</description></item><item><title>Create a Squad</title><link>https://ocgi.github.io/en/docs/getting-started/squad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/getting-started/squad/</guid><description>Squad represents a group of game servers (GameServer), they have the same resource configuration, and the Carrier controller maintains the specified number of copies of the group of GameServer. It controls the update and scaling of this group of GameServer.
Create a Squad Create a Squad with 2 replicas:
cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: carrier.ocgi.dev/v1alpha1 kind: Squad metadata: name: squad-example namespace: default spec: replicas: 2 strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate template: metadata: labels: foo: bar spec: health: disabled: true ports: - container: server containerPort: 7654 name: default protocol: TCP template: spec: containers: - image: ocgi/simple-tcp:0.</description></item><item><title>Create a GeneralPodAutoscaler</title><link>https://ocgi.github.io/en/docs/getting-started/gpa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/getting-started/gpa/</guid><description>GeneralPodAutoscaler (GPA) is fully compatible with the functions of K8s HPA. At the same time, GPA supports Crontab, Webhook and other modes.
Pre-requirement Create a squad.
# cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: carrier.ocgi.dev/v1alpha1 kind: Squad metadata: name: squad-example namespace: default spec: replicas: 2 strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate template: metadata: labels: foo: squad-example spec: health: disabled: true ports: - container: simple-udp containerPort: 7654 hostPort: 7777 name: default portPolicy: Static protocol: UDP template: spec: containers: - image: ocgi/simple-tcp:0.</description></item></channel></rss>