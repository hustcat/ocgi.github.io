<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on OCGI</title><link>https://ocgi.github.io/en/docs/reference/</link><description>Recent content in Reference on OCGI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2021 The OCGI Authors</copyright><atom:link href="https://ocgi.github.io/en/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Carrier SDK</title><link>https://ocgi.github.io/en/docs/reference/sdk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/reference/sdk/</guid><description>Background Generally speaking, the game server will cache some player status data locally. During automatic elastic scaling, the Carrier controller cannot create or delete GameServer at will. The Statefulset, Deployment and other workloads provided by K8s lack confirmation with the application when shrinking, changing and deleting Pods.
The GameServer workload provides a simple SDK. The game backend server can notify the Carrier controller of some current service status information, which is used to select the appropriate copy to delete when the Carrier controller elastically expands or releases changes.</description></item><item><title>GPA Webhook example</title><link>https://ocgi.github.io/en/docs/reference/gpa_webhook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/en/docs/reference/gpa_webhook/</guid><description>Introduction GPA(GeneralPodAutoscaler) provides a mechanism based on Webhook to auto-scaling workload. E.g:
apiVersion: autoscaling.ocgi.dev/v1alpha1 kind: GeneralPodAutoscaler metadata: name: pa-squad namespace: default spec: maxReplicas: 8 minReplicas: 1 scaleTargetRef: apiVersion: carrier.ocgi.dev/v1alpha1 kind: Squad name: squad-example webhook: parameters: buffer: &amp;#34;2&amp;#34; service: name: gpa-webhook namespace: kube-system path: scale port: 8000 Webhook Server is implemented by application, so that application can control the number of replicas of workload.
Implement Webhook Server This is a Webhook Server example for Squad.</description></item></channel></rss>