<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on OCGI</title><link>https://ocgi.github.io/zh/docs/getting-started/</link><description>Recent content in Getting Started on OCGI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2021 The OCGI Authors</copyright><atom:link href="https://ocgi.github.io/zh/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>创建GameServer</title><link>https://ocgi.github.io/zh/docs/getting-started/gameserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/zh/docs/getting-started/gameserver/</guid><description>GameServer代表单个游戏后端Server。它基于K8s Pod实现，是对K8s Pod的进一步抽象。
创建GameServer cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: &amp;#34;carrier.ocgi.dev/v1alpha1&amp;#34; kind: GameServer metadata: name: &amp;#34;simple-tcp-example&amp;#34; spec: ports: - name: default containerPort: 7654 protocol: TCP health: disabled: true template: spec: containers: - name: server image: ocgi/simple-tcp:0.1 resources: requests: memory: &amp;#34;32Mi&amp;#34; cpu: &amp;#34;20m&amp;#34; limits: memory: &amp;#34;32Mi&amp;#34; cpu: &amp;#34;20m&amp;#34; serviceAccount: carrier-sdk serviceAccountName: carrier-sdk EOF 查看GameServer信息 # kubectl get gs NAME STATE ADDRESS PORT EXTERNALIP PORTRANGE NODE AGE simple-tcp-example Running 172.</description></item><item><title>创建Squad</title><link>https://ocgi.github.io/zh/docs/getting-started/squad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/zh/docs/getting-started/squad/</guid><description>Squad代表一组游戏后端Server(GameServer)，它们具有相同的资源配置，并由Carrier controller维持该组GameServer在指定的副本数量。它控制该组GameServer的发布和更新。
Create a Squad 创建一个2个副本的Squad:
cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: carrier.ocgi.dev/v1alpha1 kind: Squad metadata: name: squad-example namespace: default spec: replicas: 2 strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate template: metadata: labels: foo: bar spec: health: disabled: true ports: - container: server containerPort: 7654 name: default protocol: TCP template: spec: containers: - image: ocgi/simple-tcp:0.1 name: server EOF 查看Squad信息 # kubectl get sqd NAME SCHEDULING DESIRED CURRENT UP-TO-DATE READY AGE squad-example MostAllocated 2 2 2 2 4s 其中：</description></item><item><title>Create a GeneralPodAutoscaler</title><link>https://ocgi.github.io/zh/docs/getting-started/gpa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ocgi.github.io/zh/docs/getting-started/gpa/</guid><description>GeneralPodAutoscaler(GPA)完全兼容K8s HPA的功能。同时，GPA支持Crontab、Webhook等方式。
前置条件 创建一个如下的squad
# cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: carrier.ocgi.dev/v1alpha1 kind: Squad metadata: name: squad-example namespace: default spec: replicas: 2 strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate template: metadata: labels: foo: squad-example spec: health: disabled: true ports: - container: simple-udp containerPort: 7654 hostPort: 7777 name: default portPolicy: Static protocol: UDP template: spec: containers: - image: ocgi/simple-tcp:0.1 imagePullPolicy: Always name: server serviceAccount: carrier-sdk serviceAccountName: carrier-sdk EOF 定时扩缩模式 基于Crontab语法，支持多时间段</description></item></channel></rss>